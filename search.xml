<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HSTS安全信息重置问题解决方法</title>
    <url>/blog/ShenMingyu/ac3979a/</url>
    <content><![CDATA[<h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述">#</a> 问题描述：</h3>
<p>最近在连接 Github 上传博客时经常会出现访问博客网站显示以下图片的情况</p>

<p>还有这样的问题：</p>

<p>几经查找问题所在，最后发现是浏览器为了用户安全而设置的安全配置。</p>
<blockquote>
<p><code>HSTS</code>  是一个很简单的访问安全策略，通过在 HTTP 头部中增加字段告诉客户端 HTTPS 连接的相关信息，客户端（浏览器）通过这些信息校验连接是否可信。</p>
<p>因此，出现这个错误的原因是因为服务端的 HTTPS 证书被劫持了、而服务端又开启了 HSTS 策略导致的。完美的解决方案只有一种，就是避免网站被劫持。临时的解决方案可以通过修改浏览器配置来完成。</p>
</blockquote>
<h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法">#</a> 解决方法：</h3>
<h4 id="如果是谷歌浏览器在浏览器网址输入框内输入"><a class="markdownIt-Anchor" href="#如果是谷歌浏览器在浏览器网址输入框内输入">#</a> 如果是谷歌浏览器，在浏览器网址输入框内输入：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome:&#x2F;&#x2F;net-internals&#x2F;#hsts</span><br></pre></td></tr></table></figure>
<p>会跳出如下页面：</p>

<p>注意最下方的  <code>Delete domain security policies</code> ，在这里输入想要访问的网站域名，填写一级域名二级域名都可以，然后点击  <code>Delete</code>  就可以成功登陆了。</p>
<h4 id="edge浏览器情况类似"><a class="markdownIt-Anchor" href="#edge浏览器情况类似">#</a> edge 浏览器情况类似：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edge:&#x2F;&#x2F;net-internals&#x2F;#hsts</span><br></pre></td></tr></table></figure>
<p>其他的操作都是一样的。</p>

<p>然后再去登陆网站。</p>

<p>发现已经可以登录了。</p>
<hr>
<p>——————————————————————— 分界线 ———————————————————————</p>
<hr>
<p>更新：2020-9-12 20:08</p>
<p>​		才发现上面的一个问题，会出现的两种情况中，如果是 “无法访问此网站” 的问题，这里应该是网络的问题，经过架梯子的方式是可以直接解决的。</p>
<p>​		而如果是显示了 HSTS 之类的问题，则需要使用上述方法来解决。</p>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>safty</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP学习笔记</title>
    <url>/blog/ShenMingyu/55d182ea/</url>
    <content><![CDATA[<p>学习笔记系列博客仅用于个人的课程学习记录以用于回顾加强学习效果。</p>
<h2 id="所需环境"><a class="markdownIt-Anchor" href="#所需环境">#</a> 所需环境</h2>
<p><strong>macOS：</strong> MAMP（虽然 php5.3 以后版本都自带服务器，但是感觉还是使用集成环境更容易上手一些）</p>
<p><strong>Windows：</strong> WAMP</p>
<p><strong>使用编辑器：</strong> VScode</p>
<p><a href="https://www.php.net/manual/zh/">PHP 官方文档</a></p>
<hr>
<h2 id="学习过程"><a class="markdownIt-Anchor" href="#学习过程">#</a> 学习过程：</h2>
<h3 id="数学运算相关函数"><a class="markdownIt-Anchor" href="#数学运算相关函数">#</a> 数学运算相关函数：</h3>
<ul>
<li>
<p><strong>幂运算</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">number pow(number $base, number $exp)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>平方根</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> sqrt(<span class="keyword">float</span> $arg)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>向上取整</strong></p>
<ul>
<li>应用场景：
<ul>
<li>计算分页的总页数</li>
<li>ceil 总记录数 / 每页显示的记录数</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> ceil(<span class="keyword">float</span> $value)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>向下取整</strong></p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> floor(<span class="keyword">float</span> $value)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>随机数</strong></p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rand(<span class="keyword">void</span>)</span><br><span class="line"><span class="keyword">int</span> rand(<span class="keyword">int</span> $min, <span class="keyword">int</span> $max)</span><br></pre></td></tr></table></figure>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> mt_rand(<span class="keyword">void</span>)</span><br><span class="line"><span class="keyword">int</span> mt_void(<span class="keyword">int</span> $min, <span class="keyword">int</span> $max)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>四舍五入</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> round(<span class="keyword">float</span> $val[, $precision = <span class="number">0</span>])</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>数字格式化</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> numebr_format(<span class="keyword">float</span> $number[, <span class="keyword">int</span> $decimals = <span class="number">0</span>])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符串相关库函数"><a class="markdownIt-Anchor" href="#字符串相关库函数">#</a> 字符串相关库函数：</h3>
<ul>
<li>
<p><strong>截取字符串</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> substr(<span class="keyword">string</span> $string, <span class="keyword">int</span> $start [<span class="keyword">int</span> $length])</span><br><span class="line"><span class="comment">// 字符串从0开始编号</span></span><br><span class="line"><span class="comment">// 如果$start为负数，则倒数</span></span><br><span class="line"><span class="comment">// 如果省略$length，则返回整个字符串</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>大小写相关</strong></p>
<ul>
<li><strong>将字符串所有字母小写</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> strtolower(<span class="keyword">string</span> \$string)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>将字符串所有字母大写</strong></li>
</ul>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> strtoupper(<span class="keyword">string</span> \$string)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>将字符串首字母小写</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> lcfirst(<span class="keyword">string</span> \$str)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>将字符串首字母大写</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> ucfirst(<span class="keyword">string</span> \$str)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>将字符串每个单词首字母大写</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> ucwords(<span class="keyword">string</span> \$str)</span><br></pre></td></tr></table></figure>

</li>
<li>
<p><strong>字符串替换</strong></p>
<ul>
<li>
<p><strong>区分大小写</strong></p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mixed str_replace(mixed $search, mixed $replace, mixed $subject)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>不区分大小写</strong></p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mixed str_ireplace(mixed $search, mixed $replace, mixed $subject)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>

<h3 id="md5加密及实际使用"><a class="markdownIt-Anchor" href="#md5加密及实际使用">#</a> md5 加密及实际使用：</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> md5(<span class="keyword">string</span> $str)</span><br></pre></td></tr></table></figure>
<p>创建一个 register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆、注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://php:8888/md5.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建一个 md5.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取表单信息</span></span><br><span class="line">$username = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password = md5($_POST[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="comment">// md5函数的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断不是必须的</span></span><br><span class="line"><span class="keyword">if</span> (strlen($username) &gt;= <span class="number">8</span> &amp;&amp; strlen($username) &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">  <span class="comment">// 输出表单提交数据</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span>, $username, <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;密码：&#x27;</span>, $password, <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;请输入正确的格式&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>当然也可以添加判断条件来限制用户名和密码的格式。</p>

<hr>
<h2 id="小练习"><a class="markdownIt-Anchor" href="#小练习">#</a> 小练习：</h2>

<p>经典水仙花问题：</p>
<p>经典百钱百鸡问题：</p>
]]></content>
      <categories>
        <category>计算机语言学习</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>USB驱动程序概念</title>
    <url>/blog/ShenMingyu/7f199ca9/</url>
    <content><![CDATA[<ul>
<li><strong>PC 连接 USB 设备时会出现的现象：</strong>
<ol>
<li>右下角弹出 “发现…… 设备”。</li>
<li>跳出一个对话框，提示安装驱动程序。</li>
</ol>
</li>
</ul>
<h3 id="问题一-既然还没有安装驱动程序为何能知道是什么类型的设备"><a class="markdownIt-Anchor" href="#问题一-既然还没有安装驱动程序为何能知道是什么类型的设备">#</a> <strong>问题一</strong> 既然还没有安装 “驱动程序”，为何能知道是什么类型的设备？</h3>
<blockquote>
<p>答：</p>
<ul>
<li>windows 里已经有了 USB 的总线驱动程序，接入 USB 设备后，是 “总线驱动程序” 知道你是什么类型的设备，并提示安装该设备的 “设备驱动程序”</li>
</ul>
<p>USB 总线驱动程序负责：识别 USB 设备，给 USB 设备找到相应的驱动程序。</p>
</blockquote>
<h3 id="问题二-usb设备种类非常多为什么已接入电脑就能识别出来"><a class="markdownIt-Anchor" href="#问题二-usb设备种类非常多为什么已接入电脑就能识别出来">#</a> <strong>问题二</strong> USB 设备种类非常多，为什么已接入电脑，就能识别出来？</h3>
<blockquote>
<p>答：</p>
<ul>
<li>PC 和 USB 设别都得遵循一些规则：
<ul>
<li>USB 设备接入电脑后，PC 机会发出 “你是什么” 的询问。</li>
<li>USB 设备必须回答 “我是 xxx”，并且回答的语言必须是中文</li>
<li>USB 总线驱动程序会发出某些命令想获取设备信息（描述符）</li>
<li>USB 设备必须返回 “描述符” 给 PC</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="问题三-pc机上接有非常多的usb设备怎么分辨他们"><a class="markdownIt-Anchor" href="#问题三-pc机上接有非常多的usb设备怎么分辨他们">#</a> <strong>问题三</strong> PC 机上接有非常多的 USB 设备，怎么分辨他们？</h3>
<blockquote>
<p>USB 接口只有 4 条线：5V，GND，D-，D+</p>
<p>答：</p>
<ul>
<li>
<p>每一个 USB 设别接入 PC 时，USB 总线驱动程序都会给他分配一个编号</p>
</li>
<li>
<p>接在 USB 总线上的每一个 USB 设备都有自己的编号（地址）</p>
</li>
<li>
<p>PC 机想访问某个 USB 设备时，发出的命令都含有对应的编号（地址）</p>
</li>
</ul>
</blockquote>
<h3 id="问题四-usb设备刚接入pc时还没有编号那么pc怎么把分配的编号告诉usb设备"><a class="markdownIt-Anchor" href="#问题四-usb设备刚接入pc时还没有编号那么pc怎么把分配的编号告诉usb设备">#</a> <strong>问题四</strong> USB 设备刚接入 PC 时，还没有编号，那么 PC 怎么把分配的编号告诉 USB 设备？</h3>
<blockquote>
<p>答：</p>
<ul>
<li>新接入的 USB 设备的默认编号是 0，在未分配新编号前，PC 使用 0 编号和他通讯。</li>
</ul>
</blockquote>
<h3 id="问题五-为什么一接入usb设备pc机就能发现他"><a class="markdownIt-Anchor" href="#问题五-为什么一接入usb设备pc机就能发现他">#</a> <strong>问题五</strong> 为什么一接入 USB 设备，PC 机就能发现他</h3>
<blockquote>
<p>答：</p>
<ul>
<li>PC 的 USB 口内部，D - 和 D + 接有 15k 的下拉电阻，未接 USB 设备时为低电平，USB 设备的 USB 口内部，D - 或 D + 接有 1.5k 的上拉电阻；它一接入 PC，就会把 PC USB 口的 D - 或 D + 拉高，从硬件的角度通知 PC 有新设备接入</li>
</ul>
</blockquote>
<h3 id="其他概念"><a class="markdownIt-Anchor" href="#其他概念">#</a> <strong>其他概念：</strong></h3>
<ol>
<li>
<p><strong>USB 是主从结构的</strong></p>
<p>所有 USB 传输，都是从 USB 主机这边发起；</p>
<p>USB 设备没有 “主动” 通知 USB 主机的能力。</p>
</li>
<li>
<p><strong>USB 的传输类型</strong></p>
<ol>
<li>
<p><strong>控制传输：</strong></p>
<p>可靠，时间有保证</p>
<ul>
<li>e.g USB 折别的识别过程</li>
</ul>
</li>
<li>
<p><strong>批量传输：</strong></p>
<p>可靠，时间没有保证</p>
<ul>
<li>e.g U 盘</li>
</ul>
</li>
<li>
<p><strong>中断传输：</strong></p>
<p>可靠，实时</p>
<ul>
<li>e.g USB 鼠标</li>
</ul>
</li>
<li>
<p><strong>实时传输：</strong></p>
<p>不可靠，实时</p>
<ul>
<li>e.g USB 摄像头</li>
</ul>
</li>
</ol>
</li>
<li>
<p><strong>USB 传输的对象：</strong></p>
<ul>
<li>
<p>端点</p>
<p>我们说的 “读 U 盘”、“写 U 盘”，可以细化为：把数据写到 U 盘的端点 1，从 U 盘的端点 2 里读出数据</p>
<p>除了端点 0 之外，每一个端点只支持一个方向的数据传输。</p>
<p>端点 0 用于控制传输，既能输出也能输入。</p>
</li>
</ul>
</li>
<li>
<p>每一个端点都有传输类型，传输方向</p>
</li>
<li>
<p>术语里、程序里说的输入、输出都是基于 USB 主机的立场说的。</p>
<p>比如鼠标的数据是从鼠标传到 PC 机，对应的端点称为输入端点</p>
</li>
<li>
<p><strong>USB 总线驱动程序的作用：</strong></p>
<ol>
<li>识别 USB 设备</li>
<li>查找并安装对应的设备驱动程序</li>
<li>提供 USB 读写函数</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu云服务器Apache与Nginx的网页自定义配置</title>
    <url>/blog/ShenMingyu/26ae02a2/</url>
    <content><![CDATA[<p>相信有很多朋友们希望能够建立属于自己的网站，在成功买好域名、买好服务器、安装完必要的 LAMP 或者 LEMP、成功进入 Apache/Nginx 的默认页面后，却发现开始一筹莫展 —— 不知道该怎么样将自己写好的页面成功显示出来。本文将就这一问题展示解决方案</p>
<h3 id="apache"><a class="markdownIt-Anchor" href="#apache">#</a> <a href="#Apache%E7%AF%87">Apache</a></h3>
<h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx">#</a> <a href="#Nginx%E7%AF%87">Nginx</a></h3>
<hr>
<h2 id="apache篇"><a class="markdownIt-Anchor" href="#apache篇">#</a> Apache 篇</h2>
<p>在安装好并进入 Apache 默认网页后，显示为：</p>

<p>此时我们查看这一行：</p>
<p>这里告诉我们，只需要将该目录下的 index.html 文件修改成你自己的 html 文件就可以直接显示了。</p>
<h4 id="但以上仅仅是默认情况如果想要自定义目录呢"><a class="markdownIt-Anchor" href="#但以上仅仅是默认情况如果想要自定义目录呢">#</a> 但以上仅仅是默认情况，如果想要自定义目录呢？</h4>
<h5 id="我们需要更改这两个文件的默认配置"><a class="markdownIt-Anchor" href="#我们需要更改这两个文件的默认配置">#</a> 我们需要更改这两个文件的默认配置：</h5>
<ul>
<li>
<p>etc/apache2/sites-available/000-default.conf</p>
</li>
<li>
<p>etc/apache2/apache2.conf</p>
</li>
</ul>

<h5 id="1-首先我们修改-000-defaultconf-文件"><a class="markdownIt-Anchor" href="#1-首先我们修改-000-defaultconf-文件">#</a> 1. 首先我们修改 000-default.conf 文件</h5>

<p>​	该文件表示的是要打开的 html 默认文件目录</p>
<p>​	我们需要添加我们自定义的目录（这个文件目录由你自己修改）</p>

<h5 id="2-然后修改-apache2conf-文件"><a class="markdownIt-Anchor" href="#2-然后修改-apache2conf-文件">#</a> 2. 然后修改 apache2.conf 文件</h5>

<p>​	我们需要在下面多加一个（这个文件目录由你自己修改）</p>

<p>​	修改完后输入命令，重新启动 Apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure>
<p>​	然后进入浏览器打开自己的页面：</p>

<h4 id="大功告成"><a class="markdownIt-Anchor" href="#大功告成">#</a> 大功告成！</h4>
<hr>
<h2 id="nginx篇"><a class="markdownIt-Anchor" href="#nginx篇">#</a> Nginx 篇</h2>
<p>与 Apache 类似，安装完成 Nginx 后会显示默认页面：</p>

<h5 id="如果我们想自定义文件目录需要更改这个文件的默认配置"><a class="markdownIt-Anchor" href="#如果我们想自定义文件目录需要更改这个文件的默认配置">#</a> 如果我们想自定义文件目录，需要更改这个文件的默认配置：</h5>
<ul>
<li>etc/nginx/sites-available/default</li>
</ul>

<h5 id="1-首先我们修改文件中的-root-项"><a class="markdownIt-Anchor" href="#1-首先我们修改文件中的-root-项">#</a> 1. 首先我们修改文件中的 root 项</h5>

<p>​	该文件表示的是要打开的 html 默认文件目录</p>
<p>​	我们需要添加我们自定义的目录（这个文件目录由你自己修改）</p>

<h5 id="2-然后修改文件中的-server默认情况下是被注释掉的"><a class="markdownIt-Anchor" href="#2-然后修改文件中的-server默认情况下是被注释掉的">#</a> 2. 然后修改文件中的 server，默认情况下，是被注释掉的</h5>

<p>​	将自己的 IP 地址以及文件目录修改进去</p>

<p>修改完成后，重新上传并重新启动 Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br><span class="line"></span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>进入浏览器输入 IP 地址，打开自己的页面：</p>

<h4 id="大功告成-2"><a class="markdownIt-Anchor" href="#大功告成-2">#</a> 大功告成！</h4>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器（Ubuntu18-04）Apache与Nginx的网页自定义配置</title>
    <url>/blog/ShenMingyu/ea4916a1/</url>
    <content><![CDATA[<p>相信有很多朋友们希望能够建立属于自己的网站，在成功买好域名、买好服务器、安装完必要的 LAMP 或者 LEMP、成功进入 Apache/Nginx 的默认页面后，却发现开始一筹莫展 —— 不知道该怎么样将自己写好的页面成功显示出来。本文将就这一问题展示解决方案</p>
<h3 id="apache"><a class="markdownIt-Anchor" href="#apache">#</a> <a href="#Apache%E7%AF%87">Apache</a></h3>
<h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx">#</a> <a href="#Nginx%E7%AF%87">Nginx</a></h3>
<hr>
<h2 id="apache篇"><a class="markdownIt-Anchor" href="#apache篇">#</a> Apache 篇</h2>
<p>在安装好并进入 Apache 默认网页后，显示为：</p>

<p>此时我们查看这一行：</p>
<p>这里告诉我们，只需要将该目录下的 index.html 文件修改成你自己的 html 文件就可以直接显示了。</p>
<h4 id="但以上仅仅是默认情况如果想要自定义目录呢"><a class="markdownIt-Anchor" href="#但以上仅仅是默认情况如果想要自定义目录呢">#</a> 但以上仅仅是默认情况，如果想要自定义目录呢？</h4>
<h5 id="我们需要更改这两个文件的默认配置"><a class="markdownIt-Anchor" href="#我们需要更改这两个文件的默认配置">#</a> 我们需要更改这两个文件的默认配置：</h5>
<ul>
<li>
<p>etc/apache2/sites-available/000-default.conf</p>
</li>
<li>
<p>etc/apache2/apache2.conf</p>
</li>
</ul>

<h5 id="1-首先我们修改-000-defaultconf-文件"><a class="markdownIt-Anchor" href="#1-首先我们修改-000-defaultconf-文件">#</a> 1. 首先我们修改 000-default.conf 文件</h5>

<pre><code>该文件表示的是要打开的html默认文件目录

我们需要添加我们自定义的目录（这个文件目录由你自己修改）
</code></pre>

<h5 id="2-然后修改-apache2conf-文件"><a class="markdownIt-Anchor" href="#2-然后修改-apache2conf-文件">#</a> 2. 然后修改 apache2.conf 文件</h5>

<pre><code>我们需要在下面多加一个（这个文件目录由你自己修改）
</code></pre>

<pre><code>修改完后输入命令，重新启动Apache
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure>
<pre><code>然后进入浏览器打开自己的页面：
</code></pre>

<h4 id="大功告成"><a class="markdownIt-Anchor" href="#大功告成">#</a> 大功告成！</h4>
<hr>
<h2 id="nginx篇"><a class="markdownIt-Anchor" href="#nginx篇">#</a> Nginx 篇</h2>
<p>与 Apache 类似，安装完成 Nginx 后会显示默认页面：</p>

<h5 id="如果我们想自定义文件目录需要更改这个文件的默认配置"><a class="markdownIt-Anchor" href="#如果我们想自定义文件目录需要更改这个文件的默认配置">#</a> 如果我们想自定义文件目录，需要更改这个文件的默认配置：</h5>
<ul>
<li>etc/nginx/sites-available/default</li>
</ul>

<h5 id="1-首先我们修改文件中的-root-项"><a class="markdownIt-Anchor" href="#1-首先我们修改文件中的-root-项">#</a> 1. 首先我们修改文件中的 root 项</h5>

<pre><code>该文件表示的是要打开的html默认文件目录

我们需要添加我们自定义的目录（这个文件目录由你自己修改）
</code></pre>

<h5 id="2-然后修改文件中的-server默认情况下是被注释掉的"><a class="markdownIt-Anchor" href="#2-然后修改文件中的-server默认情况下是被注释掉的">#</a> 2. 然后修改文件中的 server，默认情况下，是被注释掉的</h5>

<pre><code>将自己的IP地址以及文件目录修改进去
</code></pre>

<p>修改完成后，重新上传并重新启动 Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br><span class="line"></span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>进入浏览器输入 IP 地址，打开自己的页面：</p>

<h4 id="大功告成-2"><a class="markdownIt-Anchor" href="#大功告成-2">#</a> 大功告成！</h4>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库专有名词相关概念的理解</title>
    <url>/blog/ShenMingyu/27d5b229/</url>
    <content><![CDATA[<p>​		这段时间学习了数据库系统概论，目前学习到关系模型，出现了很多的专有名词，书上的名词解释太过抽象，实在没能迅速理解，所以本博客通过举例以及图片事例的方式加深理解与认识。</p>
<hr>
<p>以下表作为样例表。</p>
<p>表一：</p>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th style="text-align:center">学号</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">系名</th>
<th style="text-align:center">年级</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2020001</td>
<td style="text-align:center">王小明</td>
<td style="text-align:center">19</td>
<td style="text-align:center">女</td>
<td style="text-align:center">社会学</td>
<td style="text-align:center">2020</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">2020002</td>
<td style="text-align:center">黄大鹏</td>
<td style="text-align:center">18</td>
<td style="text-align:center">男</td>
<td style="text-align:center">商品学</td>
<td style="text-align:center">2020</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">2020003</td>
<td style="text-align:center">张文斌</td>
<td style="text-align:center">20</td>
<td style="text-align:center">女</td>
<td style="text-align:center">法律学</td>
<td style="text-align:center">2020</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
</tbody>
</table>
<p>表二：</p>
<table>
<thead>
<tr>
<th style="text-align:center">课程编号</th>
<th style="text-align:center">授课老师</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">109001</td>
<td style="text-align:center">徐涛</td>
</tr>
<tr>
<td style="text-align:center">109002</td>
<td style="text-align:center">林珏</td>
</tr>
<tr>
<td style="text-align:center">109003</td>
<td style="text-align:center">李敏辰</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
</tbody>
</table>
<p>注：以上两个表格的内容纯属虚构。</p>
<ol>
<li>
<p><strong>关系（relation）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>一个关系对应通常说的一张表。</p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>元组（tuple）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>表中的一行即为一个元组</p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>属性（attribute）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>表中的一列即为一个属性，给每一个属性起一个名称即属性名。</p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>码 / 码键（key）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>表中的某个属性组，可以唯一确定一个元组。</p>
</li>
<li>
<p>例子：</p>

<!-- 这里需要注意的是码不是唯一的 -->
</li>
<li>
<p><strong>候选码（candidate key）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>若关系中的某一属性组的值能唯一的标识一个元组，而其子集不能，则称其为<mark>候选码</mark></p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>主码（primary key）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>若一个关系有多个候选码，则选定其中一个作为<mark>主码</mark></p>
</li>
<li>
<p>例子：</p>

<!-- 候选码可以有多个，但主码只能有一个 -->
</li>
</ul>
</li>
<li>
<p><strong>全码（all-key）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>当关系模式的所有属性是这个关系模式的候选码时，称为<mark>全码</mark></p>
</li>
<li>
<p>例子：</p>
<p>即该表中的每一个属性都没办法完全代表一个元组，只有当所有的属性组成的集合才能代表一个元组时，即为全码</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>域（domain）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>一组具有相同数据类型的值的集合</p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>笛卡尔积（cardinal product）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>笛卡尔积是域上的一种集合运算</p>
<!-- 通过笛卡尔积叉乘出来所得到的是全表 -->
<!-- 需要将这里的笛卡尔积与后续章节关系运算中的笛卡尔积进行区分 -->
</li>
<li>
<p>例子：</p>
<p>表一✖️表二：</p>

<!-- 注意 表一✖️表二 和 表二✖️表一 是不同的结果 -->
</li>
</ul>
</li>
<li>
<p><strong>分量（component）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>元组中的一个属性值</p>
</li>
<li>
<p>例子：</p>

</li>
</ul>
</li>
<li>
<p><strong>基数（cardinal number）</strong></p>
<ul>
<li>
<p>抽象定义：</p>
<p>一个域允许的不同取值个数称为这个域的基数</p>
</li>
<li>
<p>例子：</p>
<p>表一和表二的基数即：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo stretchy="false">(</mo><mtext>编号</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>学号</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>姓名</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>年龄</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>2</mn><mo stretchy="false">(</mo><mtext>性别</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>系名</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>1</mn><mo stretchy="false">(</mo><mtext>年级</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>课程编号</mtext><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">(</mo><mtext>授课老师</mtext><mo stretchy="false">)</mo><mo>=</mo><mn>4374</mn></mrow><annotation encoding="application/x-tex">3(编号)*3(学号)*3(姓名)*3(年龄)*2(性别)*3(系名)*1(年级)*3(课程编号)*3(授课老师) = 4374
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">编</span><span class="mord cjk_fallback">号</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">学</span><span class="mord cjk_fallback">号</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">姓</span><span class="mord cjk_fallback">名</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">年</span><span class="mord cjk_fallback">龄</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">别</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">名</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord cjk_fallback">年</span><span class="mord cjk_fallback">级</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">课</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">编</span><span class="mord cjk_fallback">号</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord cjk_fallback">授</span><span class="mord cjk_fallback">课</span><span class="mord cjk_fallback">老</span><span class="mord cjk_fallback">师</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">3</span><span class="mord">7</span><span class="mord">4</span></span></span></span></span></p>
</li>
</ul>
</li>
</ol>
<p><strong>关系的三种类型：</strong></p>
<ol>
<li>
<p>基本关系（通常又称为基本表或基表）</p>
<p>性质：</p>
<ol>
<li>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域</li>
<li>不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名</li>
<li>任意两个元组中的候选码不能去相同的值</li>
<li>列的顺序无所谓，即列的次序可以任意交换</li>
<li>行的顺序无所谓，即行的次序可以任意调换</li>
<li>分量必须取原子值，即每一个分量都必须是不可分的数据项</li>
</ol>
</li>
<li>
<p>查询表</p>
</li>
<li>
<p>视图表</p>
</li>
</ol>
]]></content>
      <categories>
        <category>课程学习</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github 搭建简易个人博客网站</title>
    <url>/blog/ShenMingyu/ac755f68/</url>
    <content><![CDATA[<p>相信很多朋友都希望搭建一个个人博客网站，在搭建时，需要考虑的因素有很多，包括需不需要租用个人服务器，需不需要购买域名等等问题，这里给大家推荐一个使用 GitHub Pages 作为载体，Hexo 作为框架搭建个人博客的方法。</p>
<h3 id="hexo-简介"><a class="markdownIt-Anchor" href="#hexo-简介">#</a> Hexo 简介：</h3>
<blockquote>
<p>Hexo 是一个基于<a href="http://nodejs.cn"> nodejs</a> 的静态博客网站生成器</p>
<p>特点：</p>
<ul>
<li>不可思议的快速 ─ 只要一眨眼静态文件即生成完成</li>
<li>支持 Markdown</li>
<li>仅需一道指令即可部署到 <a href="http://pages.github.com/">GitHub Pages</a> 和 <a href="http://heroku.com/">Heroku</a></li>
<li>高扩展性、自订性</li>
<li>兼容于 Windows, Mac &amp; Linux</li>
</ul>
</blockquote>
<h3 id="github-page-简介"><a class="markdownIt-Anchor" href="#github-page-简介">#</a> Github Page 简介：</h3>
<blockquote>
<p>Github Pages 在这里用于托管 Github 网页项目，拥有 300M 的免费空间，虽然由于 Github 服务器在国外会导致速度较慢，但是 Github 仍然是 IT 人必须融入的大社区</p>
</blockquote>
<h2 id="搭建步骤"><a class="markdownIt-Anchor" href="#搭建步骤">#</a> 搭建步骤</h2>
<h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置">#</a> 环境配置：</h3>
<p>npm、nodejs、git、hexo</p>
<h3 id="npm-nodejs的安装"><a class="markdownIt-Anchor" href="#npm-nodejs的安装">#</a> npm、nodejs 的安装：</h3>
<h4 id="linuxmacos-环境下"><a class="markdownIt-Anchor" href="#linuxmacos-环境下">#</a> Linux/macOS 环境下：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install nodejs</span><br><span class="line"></span><br><span class="line">apt install npm</span><br></pre></td></tr></table></figure>
<p>也可以用 wget <a href="https://github.com/nvm-sh/nvm#installing-and-updating">nvm</a> 来进行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.3&#x2F;install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line">nvm install-latest-npm</span><br></pre></td></tr></table></figure>
<p>当然 npm 由于使用的是国外服务器进行安装，我们可以安装 <a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">cnpm</a> 方便以后的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="git的安装"><a class="markdownIt-Anchor" href="#git的安装">#</a> Git 的安装：</h3>
<p>前往<a href="https://git-scm.com/downloads"> Git 官网</a>，选择当前的操作系统，进行安装，一步步操作即可。</p>
<p>当然对于 Linux 玩家，使用 <code>apt-get</code> / <code>yum</code>  进行安装也是可以的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ubuntu</span><br><span class="line">sudo apt-get install git-core</span><br><span class="line"></span><br><span class="line"># CentOS</span><br><span class="line">sudo yum install git-core</span><br></pre></td></tr></table></figure>
<p>macOS 玩家也可以使用 <code>homebrew</code>  来安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h3 id="在-github-上新建仓库"><a class="markdownIt-Anchor" href="#在-github-上新建仓库">#</a> 在 Github 上新建仓库：</h3>
<p>如果是没有 Github 账户的请先去 <a href="https://github.com">Github 官方网站</a>注册账号。</p>
<p>![image-20200830133124041](./Hexo + Github 搭建简易个人博客网站 /image-20200830133124041.png)</p>
<p>然后填写仓库名称，这个名称格式必须为：“<a href="http://xn--6qqv7i14o6xtz1z.git.io">你的账户名.git.io</a>”，账户名称就和前面的 Owner 名一样。</p>
<img src="Hexo + Github 搭建简易个人博客网站/image-20200830133504463.png" alt="image-20200830133504463" style="zoom: 50%;" />
<p>创建后会得到一个空仓库</p>
<h3 id="hexo的安装"><a class="markdownIt-Anchor" href="#hexo的安装">#</a> Hexo 的安装：</h3>
<h4 id="回到自己想要创建项目的目录创建一个新文件夹我命名为-blog"><a class="markdownIt-Anchor" href="#回到自己想要创建项目的目录创建一个新文件夹我命名为-blog">#</a> 回到自己想要创建项目的目录，创建一个新文件夹，我命名为 “blog”</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;shenmingyu&#x2F;Documents&#x2F;blog</span><br></pre></td></tr></table></figure>
<h4 id="hexo-cli是hexo的命令行模式工具之后使用的命令需要这个安装"><a class="markdownIt-Anchor" href="#hexo-cli是hexo的命令行模式工具之后使用的命令需要这个安装">#</a> hexo-cli 是 hexo 的命令行模式工具之后使用的命令需要这个安装</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<!-- 由于已经安装过hexo了，因此会出现报错的情况，正常安装即可 -->
<h4 id="进行hexo初始化"><a class="markdownIt-Anchor" href="#进行hexo初始化">#</a> 进行 hexo 初始化：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>这个过程可能需要一些时间，因为需要从 github 上克隆资源，不过不会花太长时间啦～，当然如果有梯子的话应该会更快一些。</p>

<h4 id="在本目录下安装所需组件"><a class="markdownIt-Anchor" href="#在本目录下安装所需组件">#</a> 在本目录下安装所需组件：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm instll</span><br></pre></td></tr></table></figure>
<img src="Hexo%20+%20Github%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20200912203128276.png" alt="image-20200912203128276" style="zoom:50%;" />
<h4 id="修改hexo项目配置文件"><a class="markdownIt-Anchor" href="#修改hexo项目配置文件">#</a> 修改 hexo 项目配置文件</h4>
<p>这时候在 finder（文件资源管理器中）（我是 macOS）可以看到在 “blog” 目录下已经创建好了很多的配置文件</p>
<img src="Hexo%20+%20Github%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20200912203305225.png" alt="image-20200912203305225" style="zoom:67%;" />
<p>这里最重要的就是 “_config.yml” 文件了，使用 Xcode（是编辑器就可以）打开，里面大致是这样的：</p>
<img src="Hexo%20+%20Github%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20200912203526822.png" alt="image-20200912203526822" style="zoom: 33%;" />
<p>我们滑到文件的最后，在  <code>Deployment</code>  里添加配置，</p>

<p>更改配置如下（repo 处网址的类型给出了一个样例，可以直接根据注释所写来做）：</p>

<h4 id="生成页面-上传页面"><a class="markdownIt-Anchor" href="#生成页面-上传页面">#</a> 生成页面、上传页面</h4>
<p>保存文件，进入命令行，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean	# 这条命令可以不用，是用来清除当前已生成的静态页面的</span><br><span class="line">hexo g		# hexo generate 也可以</span><br><span class="line">hexo d	# hexo deploy 也可以</span><br></pre></td></tr></table></figure>
<p>如果想在本地服务器预览页面，可以输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s	# hexo serve 也可以</span><br></pre></td></tr></table></figure>
<p>这条指令会在本地的 <a href="http://localhost:4000">http://localhost:4000</a> 生成预览。如下：</p>

<img src="Hexo%20+%20Github%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20200912204419516.png" alt="image-20200912204419516" style="zoom: 33%;" />
<p>在运行上述命令后，就可以直接登陆你的 <a href="https://username.github.io">https://username.github.io</a> 网址来查看你刚刚生成的博客主页啦！</p>
<p>想要将 markdown 文件上传的可以直接将 md 文件存入  <code>/source/_posts/</code>  文件夹内然后就可以直接在自己的网站上看到了。</p>

<p>至于将 markdown 文档中的图片上传的方式我会在另一篇博客中详细阐述。</p>
<p>一起在自己的博客网站中尽情畅游吧！</p>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/blog/ShenMingyu/f12cbde5/</url>
    <content><![CDATA[<p>我使用的是 bilibili 上的 <a href="https://www.bilibili.com/video/BV1iJ411m7Fj?t=1635">《3 小时学会 MySQL 初学入门完整教程》</a> 进行 MySQL 学习。是由油管上的技术大咖 Mosh 录制的教程。</p>
<p>环境配置过程不赘述，视频中有详细描述，学习笔记系列博客仅用于个人的课程学习记录以用于回顾加强学习效果。</p>
<h2 id="所需环境"><a class="markdownIt-Anchor" href="#所需环境">#</a> 所需环境：</h2>
<p>MySQL-community、MySQL Workbench。</p>
<hr>
<h2 id="学习过程"><a class="markdownIt-Anchor" href="#学习过程">#</a> 学习过程：</h2>
<p>生成数据库后，进入 customers，</p>

<p>点击右侧的图标。</p>

<p>可以看到数据库中的所有数据：</p>

<p>修改代码框中的  <code>SELECT* FROM sql_store.customer_id</code>  为  <code>SELECT* FROM sql_store.orders</code></p>
<p>注意这里的  <code>customer_id</code></p>

<p><strong>我们在查找信息的时候，由于成员的信息可能会随时变化，因此需要一个<mark>固定的唯一的</mark>标识来进行统一记录，这样也能方便日后进行数据更改，这里使用的是  <code>customer_id</code>  来进行区分。</strong></p>
<p>​		在订单表中的客户 ID 列是和客户表中的 ID 列相关联的。</p>
<p>即关系数据库。</p>
<h3 id="从单个面板检索数据"><a class="markdownIt-Anchor" href="#从单个面板检索数据">#</a> 从单个面板检索数据：</h3>
<p>新开一个 Query 界面，在其中输入如下代码：使用  <code>sql_store</code>  数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- &#39;USE&#39;函数用来定义使用哪一个数据库，有一点类似C、C++中的&#39;include&#39;和 Java、Python中的&#39;import&#39;</span><br><span class="line">USE sql_store; </span><br><span class="line">-- &#39;SELECT&#39;表示选中哪些元素，&#39;*&#39;代表选中所有项</span><br><span class="line">SELECT *</span><br><span class="line">-- &#39;FROM&#39;子句表示从数据库的哪个表中获取数据元素</span><br><span class="line">FROM customers</span><br><span class="line">-- &#39;WHERE&#39;子句代表在数据表中查找哪个更具体的元素，可作为过滤条件语句</span><br><span class="line">WHERE customer_id &#x3D; 1</span><br><span class="line">-- &#39;ORDER BY&#39;子句代表以什么为基准进行排序，数字会从1升序排序，字符串会从a升序排列</span><br><span class="line">ORDER BY first_name</span><br></pre></td></tr></table></figure>

<p>由于使用了  <code>WHERE customer_id = 1</code>  只有一个元素，故注释这一句后，会得到如下数据表：这里排序方式是  <code>first_name</code>  显然是从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span> 进行排序的。</p>

<h3 id="将-mysql-代码更加清晰"><a class="markdownIt-Anchor" href="#将-mysql-代码更加清晰">#</a> 将 MySQL 代码更加清晰：</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在 MySQL 语言中，是以分号为一个语句的结束符，因此在下一个语句前，需要有一个分号进行语句分割。</span><br><span class="line">SELECT </span><br><span class="line">-- 可以换行，这样可使代码更加清晰美观。注意选择的每一单项后面都需要添加&#39;,&#39;</span><br><span class="line">	last_name,</span><br><span class="line">	first_name,</span><br><span class="line">	points,</span><br><span class="line">-- 在 MySQL 语言中，可以直接输入表达式，并且运算符的优先级与其他语言无异</span><br><span class="line">	points + 10，</span><br><span class="line">	points + 20 * 10 AS pay_back，</span><br><span class="line">	(points + 30) * 100 AS &#39;discount factor&#39;</span><br><span class="line">-- 使用 &#39;AS&#39; 语句可以创建一个以后面的字符串为名的列，如果名称多于一个单词，可以使用下划线或者使用单引号包含之。</span><br><span class="line">From customers</span><br></pre></td></tr></table></figure>

<p>这里注意后三列：</p>
<ul>
<li>当我们不使用  <code>AS</code>  语句进行列的重命名时，会自动使用运算语句作为列名称。</li>
</ul>
<h3 id="在数据库中修改数据"><a class="markdownIt-Anchor" href="#在数据库中修改数据">#</a> 在数据库中修改数据：</h3>
<p>在运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM xxx（数据库名）</span><br></pre></td></tr></table></figure>
<p>后，下方会图形化的显示出所有的数据项，这可以双击进行修改，修改后需要点击 ‘apply’ 进行应用即可保存。</p>

<h3 id="隐藏重复相同数据项的出现"><a class="markdownIt-Anchor" href="#隐藏重复相同数据项的出现">#</a> 隐藏重复相同数据项的出现：</h3>
<p>继上一步后，在代码行输入并运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT state FROM customers;</span><br></pre></td></tr></table></figure>
<p>会发现下方显示了两个相同的数据：</p>

<p>此时可以在代码行添加  <code>DISTINCT</code>  关键字，这样就可以避免重复了。</p>
<img src="MYSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200913150541758.png" alt="image-20200913150541758" style="zoom: 50%;" />
<h3 id="where-子句的作用"><a class="markdownIt-Anchor" href="#where-子句的作用">#</a>  <code>WHERE</code>  子句的作用：</h3>
<ol>
<li>
<p>使用  <code>WHERE</code>  子句进行条件过滤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 挑选出积分高于3000的顾客</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE points &gt; 3000</span><br><span class="line">-- 在 MySQL 语法中，逻辑运算符与其他语言基本相同，可以使用 &amp;&amp; 或 AND，|| 或 OR，! 或 NOT</span><br><span class="line"></span><br><span class="line">-- 不等于 可以使用 !&#x3D; 或者 &lt;&gt;</span><br></pre></td></tr></table></figure>
<!-- 注意 AND 的优先级是高于 OR 的！ -->

<p>再举一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 挑选出居住地不在 VA 的顾客</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE state &lt;&gt; &#39;VA&#39;</span><br><span class="line">-- 这里 &#39;va&#39; 使用大小写都是可以的，不区分大小写</span><br></pre></td></tr></table></figure>
<p>原本在表首的两位 VA 的顾客即被过滤。</p>

<p>在使用 ’&gt;’ 和 ’&lt;’ 时，也可以判断年月日，大于号即在当天之后的日期，小于号即在当天之前的日期。</p>
</li>
<li></li>
</ol>
<hr>
<h2 id="小练习"><a class="markdownIt-Anchor" href="#小练习">#</a> 小练习：</h2>
<h3 id="编写一个-sql-查询以返回数据库中的所有产品在显示结果集中要求看到三列名字原价现价-其中-现价-列要求基于-原价-11"><a class="markdownIt-Anchor" href="#编写一个-sql-查询以返回数据库中的所有产品在显示结果集中要求看到三列名字原价现价-其中-现价-列要求基于-原价-11">#</a> 编写一个 SQL 查询以返回数据库中的所有产品，在显示结果集中，要求看到三列 “名字”，“原价”，“现价”。其中 “现价” 列要求基于  <code>原价 * 1.1</code></h3>
<p>使用了 <strong>products</strong> 数据表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	name,</span><br><span class="line">	unit_price,</span><br><span class="line">	unit_price * 1.1 AS new_price</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure>
<img src="MYSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200913151321192.png" alt="image-20200913151321192" style="zoom:50%;" />
<h3 id="编写一个-sql-查询以获取-2018-年的所有订单使用-where-子句完成"><a class="markdownIt-Anchor" href="#编写一个-sql-查询以获取-2018-年的所有订单使用-where-子句完成">#</a> 编写一个 SQL 查询以获取 2018 年的所有订单，使用  <code>WHERE</code>  子句完成</h3>
<p>使用了 **orders ** 数据表。</p>
<p>常识性错误❌：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &gt;&#x3D; 2018-01-01 &amp;&amp; order_date &lt;&#x3D; 2018-12-31</span><br></pre></td></tr></table></figure>
<p><mark>上面的代码是有问题的</mark>。因为 2018-01-01 和 2018-12-31 是字符串，但上面的代码___没有添加单 / 双引号___，因此结果会出现错误。</p>
<p>正确做法✅：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &gt;&#x3D; &#39;2019-01-01&#39; &amp;&amp; order_date &lt;&#x3D; &#39;2019-12-31&#39;</span><br><span class="line">-- &amp;&amp; 和 AND 、 || 和 OR 都是可以的</span><br></pre></td></tr></table></figure>

<p>这样才是正确的结果。</p>
<h3 id="编写一个-sql-查询以从订单号为-6-且总价格大于-30-的商品"><a class="markdownIt-Anchor" href="#编写一个-sql-查询以从订单号为-6-且总价格大于-30-的商品">#</a> 编写一个 SQL 查询以从订单号为 6 且总价格大于 30 的商品</h3>
<p>使用了 <strong>order_items</strong> 数据表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM order_items</span><br><span class="line">WHERE order_id &#x3D;&#x3D; 6 AND (quantity * unit_price) &gt;&#x3D; 30</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机语言学习</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编写解决Clion解决方案的脚本</title>
    <url>/blog/ShenMingyu/d176d77e/</url>
    <content><![CDATA[<p>这段时间宅在家躲避疫情，仔细思考了一下，发现即便有了这样的一个教程，很多朋友依然会因为嫌麻烦或者看不懂而不去结局这个小问题，于是乎，我便写了一个 Python 脚本，可以自动生成 Clino 中的 CMakeLists.txt 和自定义生成 *.cpp 文件</p>
<h2 id="首先了解需要的指令内容"><a class="markdownIt-Anchor" href="#首先了解需要的指令内容">#</a> 首先，了解需要的指令内容</h2>
<p>在编写这个脚本前，我们首先需要了解一下必要的 Python 创建文件夹以及创建、读写文件的基本指令，这里只会列出本文需要的指令内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir()		<span class="comment"># 创建单级目录</span></span><br><span class="line"></span><br><span class="line">open()				<span class="comment"># 打开文件, 如果文件不存在, 则创建文件</span></span><br><span class="line">							<span class="comment"># 这里注意第二个参数不同的含义, 本文使用了&quot;w+&quot;、&quot;w&quot;和&quot;a&quot;</span></span><br><span class="line">  						<span class="comment"># &quot;w+&quot;: 以读写的形式打开</span></span><br><span class="line">    					<span class="comment"># &quot;w&quot;: 以写的形式打开</span></span><br><span class="line">          		<span class="comment"># &quot;a&quot;: 以追加(添加内容)的形式打开</span></span><br><span class="line">  </span><br><span class="line">.write()			<span class="comment"># 将内容写入文件中</span></span><br><span class="line">.close()			<span class="comment"># 关闭文件, 虽然一般不会有很大问题, 不过这个最好养成习惯, 每次都写上去</span></span><br></pre></td></tr></table></figure>
<h2 id="了解完指令内容-正式进入正题"><a class="markdownIt-Anchor" href="#了解完指令内容-正式进入正题">#</a> 了解完指令内容，正式进入正题！</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment"># ################ 这个框里不是必须的 ################# #</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 我写这个主要是为了和手动创建的文件内容完全一致</span></span><br><span class="line">  	usrname = input(<span class="string">&quot;请输入您的姓名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    date = input(<span class="string">&quot;请输入日期，格式为（年/月/日）：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ################################################## # </span></span><br><span class="line">    </span><br><span class="line">  	<span class="comment"># 以下为创建新文件，并在其中写入基本内容</span></span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 将文件目录拷贝过来(绝对路径)</span></span><br><span class="line">    path = input(<span class="string">&quot;请输入文件的目录：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义文件夹名称</span></span><br><span class="line">    folder_name = input(<span class="string">&quot;请输入新建文件夹名称：&quot;</span>)</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 这里创建文件夹</span></span><br><span class="line">    os.mkdir(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;folder_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建并打开子目录下的CMakeLists.txt, 在其中写入必要内容</span></span><br><span class="line">    temp = open(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;folder_name&#125;</span>/CMakeLists.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    temp.write(<span class="string">&quot;include_directories(.)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    temp.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从这里开始循环，新建多个不同的自定义文件, 可以自定义数量</span></span><br><span class="line">    amount = int(input(<span class="string">&quot;请输入创建文件数量：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> amount:</span><br><span class="line"></span><br><span class="line">        amount = amount - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        file_name = input(<span class="string">&quot;请输入新建文件名称：&quot;</span>)</span><br><span class="line"></span><br><span class="line">        f = open(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;folder_name&#125;</span>/<span class="subst">&#123;file_name&#125;</span>.cpp&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line"></span><br><span class="line">        f.write(</span><br><span class="line">            <span class="string">f&quot;//\n// Created by <span class="subst">&#123;usrname&#125;</span> on <span class="subst">&#123;date&#125;</span>.\n//\n\n#include &lt;iostream&gt;\nusing namespace std;&quot;</span></span><br><span class="line">            <span class="string">&quot;\n\nint main() &#123;\n\n&#125;&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">				<span class="comment"># 向子项目中的CMakeLists.txt输入配置信息</span></span><br><span class="line">        cmLists = open(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;folder_name&#125;</span>/CMakeLists.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">        cmLists.write(<span class="string">f&quot;\nadd_executable(<span class="subst">&#123;folder_name&#125;</span> <span class="subst">&#123;file_name&#125;</span>.cpp)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;已经对子目录内CMakeLists.txt进行更改&quot;</span>)</span><br><span class="line">				</span><br><span class="line">        <span class="comment"># 向项目根目录中的CMakeLists.txt输入配置信息</span></span><br><span class="line">        CMLists = open(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/CMakeLists.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">        CMLists.write(<span class="string">f&quot;\nADD_SUBDIRECTORY(<span class="subst">&#123;folder_name&#125;</span> <span class="subst">&#123;file_name&#125;</span>.cpp)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        CMLists.close()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;已经对项目总CMakeLists.txt进行更改&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="然后运行试试"><a class="markdownIt-Anchor" href="#然后运行试试">#</a> 然后运行试试:</h3>
<p>首先在控制台输入:</p>

<p>然后运行:</p>

<p>似乎已经完成了，我们去创建的目录查看一下，是否完成了:</p>

<p>创建文件和文件夹没有问题，那输入文本呢:</p>


<h4 id="大功告成"><a class="markdownIt-Anchor" href="#大功告成">#</a> 大功告成！！！</h4>
]]></content>
      <categories>
        <category>WEB云学习</category>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Clion</tag>
      </tags>
  </entry>
</search>
